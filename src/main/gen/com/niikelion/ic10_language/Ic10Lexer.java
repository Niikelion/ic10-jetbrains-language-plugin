// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Ic10.flex

package com.niikelion.ic10_language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.niikelion.ic10_language.psi.Ic10Types;
import com.intellij.psi.TokenType;


class Ic10Lexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int HASH_VALUE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\u10df\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\5\1\0"+
    "\1\6\1\7\1\10\1\11\2\0\1\12\1\13\4\0"+
    "\1\14\1\0\2\15\1\16\7\17\1\20\6\0\1\21"+
    "\5\22\1\23\1\24\12\23\1\25\7\23\4\0\1\26"+
    "\1\0\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\23"+
    "\1\55\1\56\1\57\12\0\1\3\u01a2\0\2\3\326\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[768];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\2\3\1\4\2\1\1\5\1\6"+
    "\12\7\1\10\1\11\5\7\1\12\3\7\1\1\1\13"+
    "\1\14\1\15\1\0\31\7\1\16\1\17\1\20\1\7"+
    "\1\21\1\22\5\7\1\23\7\7\1\24\1\25\7\7"+
    "\1\26\5\7\3\0\1\27\1\7\1\30\1\7\1\31"+
    "\1\7\1\32\2\7\1\33\2\7\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\7\7\1\43\1\44\1\7"+
    "\1\45\1\46\1\7\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\7\1\60\1\61\1\62"+
    "\2\7\1\63\1\7\1\64\3\7\1\65\1\66\1\67"+
    "\3\7\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\7\1\102\1\103\1\104\1\105"+
    "\1\7\1\106\1\7\1\107\1\7\1\110\1\7\1\111"+
    "\1\112\1\7\1\113\1\114\1\115\1\7\1\116\1\7"+
    "\1\117\1\7\1\120\1\7\1\121\1\7\1\122\1\7"+
    "\1\123\1\124\1\7\1\125\1\126\2\7\1\127\1\130"+
    "\1\131\1\132\1\133\1\134\1\135\1\136\1\137\2\7"+
    "\1\140\1\141\1\142\1\143\1\144\1\145\1\146\1\147"+
    "\1\150\1\7\1\151\1\152\1\153\1\7\1\154\1\155"+
    "\1\156\1\7\1\157\1\160\1\161\1\162\1\163\1\164"+
    "\2\7\1\165\1\166\1\167\1\170\3\7\1\171\1\7"+
    "\1\172\1\7\1\173\1\7\1\174\1\7\1\175\1\7"+
    "\1\176\1\7\1\177\1\7\1\200\1\201\1\202\1\203"+
    "\1\204\1\205\1\206\1\207\1\210\1\211\1\212\1\7"+
    "\1\213\1\214\1\7\1\215\1\216\1\217\1\220\1\221"+
    "\1\222\1\223\1\224\1\225\1\226\1\227\1\230\1\231"+
    "\1\232\1\233\1\234";

  private static int [] zzUnpackAction() {
    int [] result = new int[293];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\140\0\300\0\360\0\u0120"+
    "\0\u0150\0\u0180\0\140\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270"+
    "\0\u02a0\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0"+
    "\0\u0420\0\u0450\0\u0480\0\u04b0\0\u04e0\0\u0510\0\u0540\0\u0570"+
    "\0\u05a0\0\140\0\u05d0\0\u0600\0\u0630\0\u0660\0\u0690\0\u06c0"+
    "\0\u06f0\0\u0720\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0810\0\u0840"+
    "\0\u0870\0\u08a0\0\u08d0\0\u0900\0\u0930\0\u0960\0\u0990\0\u09c0"+
    "\0\u09f0\0\u0a20\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0\0\u01b0\0\u0b10"+
    "\0\u01b0\0\u0b40\0\u01b0\0\u01b0\0\u0b70\0\u0ba0\0\u0bd0\0\u0c00"+
    "\0\u0c30\0\u01b0\0\u0c60\0\u0c90\0\u0cc0\0\u0cf0\0\u0d20\0\u0d50"+
    "\0\u0d80\0\u0db0\0\u0de0\0\u0e10\0\u0e40\0\u0e70\0\u0ea0\0\u0ed0"+
    "\0\u0f00\0\u0f30\0\u01b0\0\u0f60\0\u0f90\0\u0fc0\0\u0ff0\0\u1020"+
    "\0\u1050\0\u0120\0\u0150\0\u0630\0\u1080\0\u01b0\0\u10b0\0\u01b0"+
    "\0\u10e0\0\u01b0\0\u1110\0\u1140\0\u1170\0\u11a0\0\u11d0\0\u1200"+
    "\0\u1230\0\u1260\0\u1290\0\u12c0\0\u12f0\0\u1320\0\u1350\0\u1380"+
    "\0\u13b0\0\u13e0\0\u1410\0\u1440\0\u1470\0\u14a0\0\u01b0\0\u14d0"+
    "\0\u01b0\0\u01b0\0\u1500\0\u1530\0\u01b0\0\u01b0\0\u1560\0\u01b0"+
    "\0\u01b0\0\u01b0\0\u01b0\0\u01b0\0\u1590\0\u01b0\0\u01b0\0\u01b0"+
    "\0\u15c0\0\u15f0\0\u01b0\0\u1620\0\u1650\0\u1680\0\u16b0\0\u16e0"+
    "\0\u1710\0\u01b0\0\u01b0\0\u1740\0\u1770\0\u17a0\0\u17d0\0\u1800"+
    "\0\u1830\0\u01b0\0\u01b0\0\u1860\0\u01b0\0\u1890\0\u18c0\0\u18f0"+
    "\0\u1920\0\u01b0\0\u01b0\0\u01b0\0\u01b0\0\u1950\0\u01b0\0\u1980"+
    "\0\140\0\u19b0\0\u01b0\0\u19e0\0\u01b0\0\u1a10\0\u1a40\0\u1a70"+
    "\0\u1aa0\0\u1ad0\0\u1b00\0\u1b30\0\u1b60\0\u1b90\0\u1bc0\0\u1bf0"+
    "\0\u1c20\0\u1c50\0\u1c80\0\u1cb0\0\u1ce0\0\u01b0\0\u1d10\0\u1d40"+
    "\0\u1d70\0\u1da0\0\u1dd0\0\u1e00\0\u1e30\0\u1e60\0\u1e90\0\u1ec0"+
    "\0\u1ef0\0\u1f20\0\u1f50\0\u01b0\0\u01b0\0\u1f80\0\u1fb0\0\u01b0"+
    "\0\u01b0\0\u01b0\0\u01b0\0\u01b0\0\u01b0\0\u01b0\0\u01b0\0\u01b0"+
    "\0\u1fe0\0\u01b0\0\u01b0\0\u01b0\0\u2010\0\u01b0\0\u01b0\0\u01b0"+
    "\0\u2040\0\u01b0\0\u01b0\0\u2070\0\u01b0\0\u01b0\0\u01b0\0\u20a0"+
    "\0\u20d0\0\140\0\u01b0\0\u01b0\0\u01b0\0\u2100\0\u2130\0\u2160"+
    "\0\u01b0\0\u2190\0\u01b0\0\u21c0\0\u01b0\0\u21f0\0\u01b0\0\u2220"+
    "\0\u01b0\0\u2250\0\u01b0\0\u2280\0\u01b0\0\u22b0\0\u01b0\0\u01b0"+
    "\0\u01b0\0\u01b0\0\u01b0\0\u01b0\0\u01b0\0\u01b0\0\u01b0\0\u01b0"+
    "\0\u01b0\0\u22e0\0\u01b0\0\u01b0\0\u2310\0\u01b0\0\u01b0\0\u01b0"+
    "\0\u01b0\0\u01b0\0\u01b0\0\u01b0\0\u01b0\0\u01b0\0\u01b0\0\u01b0"+
    "\0\u01b0\0\u01b0\0\u01b0\0\u01b0\0\u01b0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[293];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\4\1\3\1\7\1\10"+
    "\1\11\3\3\3\12\1\13\3\14\1\15\2\14\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\14"+
    "\1\26\1\14\1\27\1\30\1\31\1\32\1\33\1\14"+
    "\1\34\1\35\1\36\2\14\1\37\1\40\1\14\6\3"+
    "\1\41\4\3\1\42\44\3\61\0\1\4\3\0\1\4"+
    "\54\0\1\5\55\0\2\7\1\0\1\7\1\0\53\7"+
    "\15\0\3\43\1\0\2\43\52\0\1\44\56\0\1\45"+
    "\3\12\55\0\3\14\1\0\37\14\15\0\3\14\1\0"+
    "\1\46\36\14\15\0\3\14\1\0\7\14\1\47\1\50"+
    "\1\51\7\14\1\52\1\14\1\53\4\14\1\54\1\55"+
    "\5\14\15\0\3\14\1\0\6\14\1\56\2\14\1\57"+
    "\1\60\1\14\1\61\4\14\1\62\1\14\1\63\3\14"+
    "\1\64\7\14\15\0\3\14\1\0\12\14\1\65\6\14"+
    "\1\66\2\14\1\67\12\14\15\0\3\14\1\0\12\14"+
    "\1\70\3\14\1\71\20\14\15\0\3\14\1\0\34\14"+
    "\1\72\2\14\15\0\3\14\1\0\21\14\1\73\15\14"+
    "\15\0\3\14\1\0\12\14\1\74\24\14\15\0\3\14"+
    "\1\0\10\14\1\75\26\14\15\0\3\14\1\0\6\14"+
    "\1\76\20\14\1\77\7\14\15\0\3\14\1\0\7\14"+
    "\1\100\1\14\1\101\12\14\1\102\2\14\1\103\1\104"+
    "\6\14\15\0\3\14\1\0\6\14\1\105\7\14\1\106"+
    "\5\14\1\107\5\14\1\110\4\14\15\0\3\14\1\0"+
    "\24\14\1\111\12\14\15\0\3\14\1\0\27\14\1\112"+
    "\7\14\15\0\3\14\1\0\12\14\1\113\11\14\1\114"+
    "\5\14\1\115\4\14\15\0\3\14\1\0\6\14\1\116"+
    "\13\14\1\117\1\14\1\120\12\14\15\0\3\14\1\0"+
    "\6\14\1\121\1\122\1\14\1\123\1\124\1\14\1\125"+
    "\1\14\1\126\2\14\1\127\1\14\1\130\2\14\1\131"+
    "\1\132\1\133\1\14\1\134\4\14\15\0\3\14\1\0"+
    "\6\14\1\135\20\14\1\136\7\14\15\0\3\14\1\0"+
    "\24\14\1\137\12\14\15\0\3\14\1\0\16\14\1\140"+
    "\20\14\5\0\1\141\7\0\3\141\1\0\37\141\15\0"+
    "\3\43\1\0\2\43\3\0\1\142\46\0\1\44\10\0"+
    "\1\143\46\0\3\144\55\0\3\14\1\0\4\14\1\145"+
    "\32\14\15\0\3\14\1\0\30\14\1\146\6\14\15\0"+
    "\3\14\1\0\24\14\1\147\12\14\15\0\3\14\1\0"+
    "\11\14\1\150\25\14\15\0\3\14\1\0\16\14\1\151"+
    "\20\14\15\0\3\14\1\0\11\14\1\152\25\14\15\0"+
    "\3\14\1\0\16\14\1\153\20\14\15\0\3\14\1\0"+
    "\6\14\1\154\30\14\15\0\3\14\1\0\25\14\1\155"+
    "\11\14\15\0\3\14\1\0\23\14\1\156\4\14\1\157"+
    "\6\14\15\0\3\14\1\0\26\14\1\160\10\14\15\0"+
    "\3\14\1\0\12\14\1\161\16\14\1\162\5\14\15\0"+
    "\3\14\1\0\12\14\1\163\16\14\1\164\5\14\15\0"+
    "\3\14\1\0\6\14\1\165\3\14\1\166\24\14\15\0"+
    "\3\14\1\0\6\14\1\167\2\14\1\170\1\171\1\14"+
    "\1\172\4\14\1\173\1\14\1\174\13\14\15\0\3\14"+
    "\1\0\16\14\1\175\20\14\15\0\3\14\1\0\27\14"+
    "\1\176\7\14\15\0\3\14\1\0\30\14\1\177\6\14"+
    "\15\0\3\14\1\0\13\14\1\200\23\14\15\0\3\14"+
    "\1\0\33\14\1\201\3\14\15\0\3\14\1\0\25\14"+
    "\1\202\11\14\15\0\3\14\1\0\24\14\1\203\12\14"+
    "\15\0\3\14\1\0\31\14\1\204\5\14\15\0\3\14"+
    "\1\0\13\14\1\205\23\14\15\0\3\14\1\0\21\14"+
    "\1\206\15\14\15\0\3\14\1\0\23\14\1\207\4\14"+
    "\1\210\6\14\15\0\3\14\1\0\14\14\1\211\22\14"+
    "\15\0\3\14\1\0\34\14\1\212\2\14\15\0\3\14"+
    "\1\0\23\14\1\213\13\14\15\0\3\14\1\0\11\14"+
    "\1\214\21\14\1\215\3\14\15\0\3\14\1\0\21\14"+
    "\1\216\15\14\15\0\3\14\1\0\27\14\1\217\1\14"+
    "\1\220\5\14\15\0\3\14\1\0\12\14\1\221\24\14"+
    "\15\0\3\14\1\0\20\14\1\222\4\14\1\223\11\14"+
    "\15\0\3\14\1\0\30\14\1\224\1\225\5\14\15\0"+
    "\3\14\1\0\23\14\1\226\13\14\15\0\3\14\1\0"+
    "\6\14\1\227\30\14\15\0\3\14\1\0\32\14\1\230"+
    "\4\14\15\0\3\14\1\0\25\14\1\231\11\14\15\0"+
    "\3\14\1\0\23\14\1\232\4\14\1\233\6\14\15\0"+
    "\3\14\1\0\23\14\1\234\4\14\1\235\6\14\15\0"+
    "\3\14\1\0\21\14\1\236\4\14\1\237\10\14\15\0"+
    "\3\14\1\0\12\14\1\240\16\14\1\241\5\14\15\0"+
    "\3\14\1\0\23\14\1\242\13\14\15\0\3\14\1\0"+
    "\6\14\1\243\3\14\1\244\6\14\1\245\7\14\1\246"+
    "\5\14\15\0\3\14\1\0\6\14\1\247\3\14\1\250"+
    "\24\14\15\0\3\14\1\0\27\14\1\251\7\14\15\0"+
    "\3\14\1\0\6\14\1\252\12\14\1\253\15\14\15\0"+
    "\3\14\1\0\7\14\1\254\27\14\15\0\3\14\1\0"+
    "\23\14\1\255\13\14\15\0\3\14\1\0\32\14\1\256"+
    "\4\14\15\0\3\14\1\0\27\14\1\257\7\14\15\0"+
    "\3\14\1\0\12\14\1\260\24\14\5\0\1\141\1\261"+
    "\6\0\3\141\1\0\37\141\15\0\3\14\1\0\3\14"+
    "\1\262\33\14\15\0\3\14\1\0\30\14\1\263\6\14"+
    "\15\0\3\14\1\0\6\14\1\264\30\14\15\0\3\14"+
    "\1\0\23\14\1\265\13\14\15\0\3\14\1\0\23\14"+
    "\1\266\13\14\15\0\3\14\1\0\6\14\1\267\27\14"+
    "\1\270\15\0\3\14\1\0\30\14\1\271\6\14\15\0"+
    "\3\14\1\0\12\14\1\272\24\14\15\0\3\14\1\0"+
    "\6\14\1\273\27\14\1\274\15\0\3\14\1\0\6\14"+
    "\1\275\27\14\1\276\15\0\3\14\1\0\6\14\1\277"+
    "\27\14\1\300\15\0\3\14\1\0\6\14\1\301\27\14"+
    "\1\302\15\0\3\14\1\0\6\14\1\303\27\14\1\304"+
    "\15\0\3\14\1\0\6\14\1\305\14\14\1\306\12\14"+
    "\1\307\15\0\3\14\1\0\6\14\1\310\27\14\1\311"+
    "\15\0\3\14\1\0\25\14\1\312\11\14\15\0\3\14"+
    "\1\0\23\14\1\313\4\14\1\314\6\14\15\0\3\14"+
    "\1\0\26\14\1\315\10\14\15\0\3\14\1\0\12\14"+
    "\1\316\16\14\1\317\5\14\15\0\3\14\1\0\12\14"+
    "\1\320\16\14\1\321\5\14\15\0\3\14\1\0\6\14"+
    "\1\322\3\14\1\323\24\14\15\0\3\14\1\0\21\14"+
    "\1\324\15\14\15\0\3\14\1\0\11\14\1\325\25\14"+
    "\15\0\3\14\1\0\16\14\1\326\20\14\15\0\3\14"+
    "\1\0\24\14\1\327\12\14\15\0\3\14\1\0\11\14"+
    "\1\330\25\14\15\0\3\14\1\0\30\14\1\331\6\14"+
    "\15\0\3\14\1\0\12\14\1\332\24\14\15\0\3\14"+
    "\1\0\20\14\1\333\16\14\15\0\3\14\1\0\12\14"+
    "\1\334\24\14\15\0\3\14\1\0\15\14\1\335\21\14"+
    "\15\0\3\14\1\0\11\14\1\336\25\14\15\0\3\14"+
    "\1\0\11\14\1\337\25\14\15\0\3\14\1\0\25\14"+
    "\1\340\11\14\15\0\3\14\1\0\23\14\1\341\13\14"+
    "\15\0\3\14\1\0\36\14\1\342\15\0\3\14\1\0"+
    "\30\14\1\343\6\14\15\0\3\14\1\0\12\14\1\344"+
    "\24\14\15\0\3\14\1\0\12\14\1\345\24\14\15\0"+
    "\3\14\1\0\36\14\1\346\15\0\3\14\1\0\36\14"+
    "\1\347\15\0\3\14\1\0\36\14\1\350\15\0\3\14"+
    "\1\0\12\14\1\351\23\14\1\352\15\0\3\14\1\0"+
    "\36\14\1\353\15\0\3\14\1\0\23\14\1\354\12\14"+
    "\1\355\15\0\3\14\1\0\36\14\1\356\15\0\3\14"+
    "\1\0\31\14\1\357\5\14\15\0\3\14\1\0\23\14"+
    "\1\360\13\14\15\0\3\14\1\0\21\14\1\361\15\14"+
    "\12\0\1\362\2\0\3\14\1\0\37\14\15\0\3\14"+
    "\1\0\30\14\1\363\6\14\15\0\1\14\1\364\1\14"+
    "\1\0\37\14\15\0\3\14\1\0\21\14\1\365\15\14"+
    "\15\0\3\14\1\0\6\14\1\366\30\14\15\0\3\14"+
    "\1\0\6\14\1\367\30\14\15\0\3\14\1\0\6\14"+
    "\1\370\30\14\15\0\3\14\1\0\21\14\1\371\15\14"+
    "\15\0\3\14\1\0\6\14\1\372\30\14\15\0\3\14"+
    "\1\0\21\14\1\373\15\14\15\0\3\14\1\0\6\14"+
    "\1\374\30\14\15\0\3\14\1\0\21\14\1\375\15\14"+
    "\15\0\3\14\1\0\6\14\1\376\30\14\15\0\3\14"+
    "\1\0\21\14\1\377\15\14\15\0\3\14\1\0\6\14"+
    "\1\u0100\30\14\15\0\3\14\1\0\21\14\1\u0101\15\14"+
    "\15\0\3\14\1\0\6\14\1\u0102\30\14\15\0\3\14"+
    "\1\0\21\14\1\u0103\15\14\15\0\3\14\1\0\6\14"+
    "\1\u0104\30\14\15\0\3\14\1\0\21\14\1\u0105\15\14"+
    "\15\0\3\14\1\0\6\14\1\u0106\30\14\15\0\3\14"+
    "\1\0\36\14\1\u0107\15\0\3\14\1\0\30\14\1\u0108"+
    "\6\14\15\0\3\14\1\0\12\14\1\u0109\24\14\15\0"+
    "\3\14\1\0\36\14\1\u010a\15\0\3\14\1\0\36\14"+
    "\1\u010b\15\0\3\14\1\0\36\14\1\u010c\15\0\3\14"+
    "\1\0\36\14\1\u010d\15\0\3\14\1\0\36\14\1\u010e"+
    "\15\0\3\14\1\0\23\14\1\u010f\12\14\1\u0110\15\0"+
    "\3\14\1\0\36\14\1\u0111\15\0\3\14\1\0\23\14"+
    "\1\u0112\13\14\15\0\3\14\1\0\27\14\1\u0113\7\14"+
    "\15\0\3\14\1\0\11\14\1\u0114\25\14\15\0\3\14"+
    "\1\0\10\14\1\u0115\26\14\15\0\3\14\1\0\25\14"+
    "\1\u0116\11\14\15\0\3\14\1\0\36\14\1\u0117\15\0"+
    "\3\14\1\0\10\14\1\u0118\26\14\15\0\3\14\1\0"+
    "\11\14\1\u0119\25\14\15\0\3\14\1\0\21\14\1\u011a"+
    "\15\14\15\0\3\14\1\0\21\14\1\u011b\15\14\15\0"+
    "\3\14\1\0\21\14\1\u011c\15\14\15\0\3\14\1\0"+
    "\21\14\1\u011d\15\14\15\0\3\14\1\0\21\14\1\u011e"+
    "\15\14\15\0\3\14\1\0\21\14\1\u011f\15\14\15\0"+
    "\3\14\1\0\21\14\1\u0120\15\14\15\0\3\14\1\0"+
    "\21\14\1\u0121\15\14\15\0\3\14\1\0\21\14\1\u0122"+
    "\15\14\15\0\3\14\1\0\21\14\1\u0123\15\14\15\0"+
    "\3\14\1\0\12\14\1\u0124\24\14\15\0\3\14\1\0"+
    "\31\14\1\u0125\5\14";

  private static int [] zzUnpacktrans() {
    int [] result = new int[9024];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\5\1\1\11\26\1\1\11"+
    "\2\1\1\0\73\1\3\0\115\1\1\11\100\1\1\11"+
    "\63\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[293];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Ic10Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 157: break;
          case 2:
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 158: break;
          case 3:
            { yybegin(YYINITIAL); return Ic10Types.CRLF;
            }
          // fall through
          case 159: break;
          case 4:
            { yybegin(YYINITIAL); return Ic10Types.COMMENT;
            }
          // fall through
          case 160: break;
          case 5:
            { yybegin(YYINITIAL); return Ic10Types.DECIMAL;
            }
          // fall through
          case 161: break;
          case 6:
            { yybegin(YYINITIAL); return Ic10Types.COLON;
            }
          // fall through
          case 162: break;
          case 7:
            { yybegin(YYINITIAL); return Ic10Types.NAME;
            }
          // fall through
          case 163: break;
          case 8:
            { yybegin(YYINITIAL); return Ic10Types.OP_J;
            }
          // fall through
          case 164: break;
          case 9:
            { yybegin(YYINITIAL); return Ic10Types.OP_L;
            }
          // fall through
          case 165: break;
          case 10:
            { yybegin(YYINITIAL); return Ic10Types.OP_S;
            }
          // fall through
          case 166: break;
          case 11:
            { yybegin(YYINITIAL); return Ic10Types.CLOSEBRACKET;
            }
          // fall through
          case 167: break;
          case 12:
            { yybegin(YYINITIAL); return Ic10Types.HEXADECIMAL;
            }
          // fall through
          case 168: break;
          case 13:
            { yybegin(YYINITIAL); return Ic10Types.BINARY;
            }
          // fall through
          case 169: break;
          case 14:
            { yybegin(YYINITIAL); return Ic10Types.OP_JR;
            }
          // fall through
          case 170: break;
          case 15:
            { yybegin(YYINITIAL); return Ic10Types.OP_LB;
            }
          // fall through
          case 171: break;
          case 16:
            { yybegin(YYINITIAL); return Ic10Types.OP_LD;
            }
          // fall through
          case 172: break;
          case 17:
            { yybegin(YYINITIAL); return Ic10Types.OP_LR;
            }
          // fall through
          case 173: break;
          case 18:
            { yybegin(YYINITIAL); return Ic10Types.OP_LS;
            }
          // fall through
          case 174: break;
          case 19:
            { yybegin(YYINITIAL); return Ic10Types.OP_OR;
            }
          // fall through
          case 175: break;
          case 20:
            { yybegin(YYINITIAL); return Ic10Types.OP_SB;
            }
          // fall through
          case 176: break;
          case 21:
            { yybegin(YYINITIAL); return Ic10Types.OP_SD;
            }
          // fall through
          case 177: break;
          case 22:
            { yybegin(YYINITIAL); return Ic10Types.OP_SS;
            }
          // fall through
          case 178: break;
          case 23:
            { yybegin(YYINITIAL); return Ic10Types.FLOAT;
            }
          // fall through
          case 179: break;
          case 24:
            { yybegin(YYINITIAL); return Ic10Types.OP_ABS;
            }
          // fall through
          case 180: break;
          case 25:
            { yybegin(YYINITIAL); return Ic10Types.OP_ADD;
            }
          // fall through
          case 181: break;
          case 26:
            { yybegin(YYINITIAL); return Ic10Types.OP_AND;
            }
          // fall through
          case 182: break;
          case 27:
            { yybegin(YYINITIAL); return Ic10Types.OP_BAP;
            }
          // fall through
          case 183: break;
          case 28:
            { yybegin(YYINITIAL); return Ic10Types.OP_BEQ;
            }
          // fall through
          case 184: break;
          case 29:
            { yybegin(YYINITIAL); return Ic10Types.OP_BGE;
            }
          // fall through
          case 185: break;
          case 30:
            { yybegin(YYINITIAL); return Ic10Types.OP_BGT;
            }
          // fall through
          case 186: break;
          case 31:
            { yybegin(YYINITIAL); return Ic10Types.OP_BLE;
            }
          // fall through
          case 187: break;
          case 32:
            { yybegin(YYINITIAL); return Ic10Types.OP_BLT;
            }
          // fall through
          case 188: break;
          case 33:
            { yybegin(YYINITIAL); return Ic10Types.OP_BNA;
            }
          // fall through
          case 189: break;
          case 34:
            { yybegin(YYINITIAL); return Ic10Types.OP_BNE;
            }
          // fall through
          case 190: break;
          case 35:
            { yybegin(YYINITIAL); return Ic10Types.OP_CLR;
            }
          // fall through
          case 191: break;
          case 36:
            { yybegin(YYINITIAL); return Ic10Types.OP_COS;
            }
          // fall through
          case 192: break;
          case 37:
            { yybegin(YYINITIAL); return Ic10Types.OP_DIV;
            }
          // fall through
          case 193: break;
          case 38:
            { yybegin(YYINITIAL); return Ic10Types.OP_EXP;
            }
          // fall through
          case 194: break;
          case 39:
            { yybegin(YYINITIAL); return Ic10Types.OP_GET;
            }
          // fall through
          case 195: break;
          case 40:
            { yybegin(YYINITIAL); return Ic10Types.OP_HCF;
            }
          // fall through
          case 196: break;
          case 41:
            { yybegin(YYINITIAL); return Ic10Types.OP_JAL;
            }
          // fall through
          case 197: break;
          case 42:
            { yybegin(YYINITIAL); return Ic10Types.OP_LBN;
            }
          // fall through
          case 198: break;
          case 43:
            { yybegin(YYINITIAL); return Ic10Types.OP_LBS;
            }
          // fall through
          case 199: break;
          case 44:
            { yybegin(YYINITIAL); return Ic10Types.OP_LOG;
            }
          // fall through
          case 200: break;
          case 45:
            { yybegin(YYINITIAL); return Ic10Types.OP_MAX;
            }
          // fall through
          case 201: break;
          case 46:
            { yybegin(YYINITIAL); return Ic10Types.OP_MIN;
            }
          // fall through
          case 202: break;
          case 47:
            { yybegin(YYINITIAL); return Ic10Types.OP_MOD;
            }
          // fall through
          case 203: break;
          case 48:
            { yybegin(YYINITIAL); return Ic10Types.OP_MUL;
            }
          // fall through
          case 204: break;
          case 49:
            { yybegin(YYINITIAL); return Ic10Types.OP_NOR;
            }
          // fall through
          case 205: break;
          case 50:
            { yybegin(YYINITIAL); return Ic10Types.OP_NOT;
            }
          // fall through
          case 206: break;
          case 51:
            { yybegin(YYINITIAL); return Ic10Types.OP_POP;
            }
          // fall through
          case 207: break;
          case 52:
            { yybegin(YYINITIAL); return Ic10Types.OP_PUT;
            }
          // fall through
          case 208: break;
          case 53:
            { yybegin(YYINITIAL); return Ic10Types.OP_SAP;
            }
          // fall through
          case 209: break;
          case 54:
            { yybegin(YYINITIAL); return Ic10Types.OP_SBN;
            }
          // fall through
          case 210: break;
          case 55:
            { yybegin(YYINITIAL); return Ic10Types.OP_SBS;
            }
          // fall through
          case 211: break;
          case 56:
            { yybegin(YYINITIAL); return Ic10Types.OP_SEQ;
            }
          // fall through
          case 212: break;
          case 57:
            { yybegin(YYINITIAL); return Ic10Types.OP_SGE;
            }
          // fall through
          case 213: break;
          case 58:
            { yybegin(YYINITIAL); return Ic10Types.OP_SGT;
            }
          // fall through
          case 214: break;
          case 59:
            { yybegin(YYINITIAL); return Ic10Types.OP_SIN;
            }
          // fall through
          case 215: break;
          case 60:
            { yybegin(YYINITIAL); return Ic10Types.OP_SLA;
            }
          // fall through
          case 216: break;
          case 61:
            { yybegin(YYINITIAL); return Ic10Types.OP_SLE;
            }
          // fall through
          case 217: break;
          case 62:
            { yybegin(YYINITIAL); return Ic10Types.OP_SLL;
            }
          // fall through
          case 218: break;
          case 63:
            { yybegin(YYINITIAL); return Ic10Types.OP_SLT;
            }
          // fall through
          case 219: break;
          case 64:
            { yybegin(YYINITIAL); return Ic10Types.OP_SNA;
            }
          // fall through
          case 220: break;
          case 65:
            { yybegin(YYINITIAL); return Ic10Types.OP_SNE;
            }
          // fall through
          case 221: break;
          case 66:
            { yybegin(YYINITIAL); return Ic10Types.OP_SRA;
            }
          // fall through
          case 222: break;
          case 67:
            { yybegin(YYINITIAL); return Ic10Types.OP_SRL;
            }
          // fall through
          case 223: break;
          case 68:
            { yybegin(YYINITIAL); return Ic10Types.OP_SUB;
            }
          // fall through
          case 224: break;
          case 69:
            { yybegin(YYINITIAL); return Ic10Types.OP_TAN;
            }
          // fall through
          case 225: break;
          case 70:
            { yybegin(YYINITIAL); return Ic10Types.OP_XOR;
            }
          // fall through
          case 226: break;
          case 71:
            { yybegin(HASH_VALUE); return Ic10Types.HASHCONTENT;
            }
          // fall through
          case 227: break;
          case 72:
            { yybegin(YYINITIAL); return Ic10Types.OP_ACOS;
            }
          // fall through
          case 228: break;
          case 73:
            { yybegin(YYINITIAL); return Ic10Types.OP_ASIN;
            }
          // fall through
          case 229: break;
          case 74:
            { yybegin(YYINITIAL); return Ic10Types.OP_ATAN;
            }
          // fall through
          case 230: break;
          case 75:
            { yybegin(YYINITIAL); return Ic10Types.OP_BAPZ;
            }
          // fall through
          case 231: break;
          case 76:
            { yybegin(YYINITIAL); return Ic10Types.OP_BDNS;
            }
          // fall through
          case 232: break;
          case 77:
            { yybegin(YYINITIAL); return Ic10Types.OP_BDSE;
            }
          // fall through
          case 233: break;
          case 78:
            { yybegin(YYINITIAL); return Ic10Types.OP_BEQZ;
            }
          // fall through
          case 234: break;
          case 79:
            { yybegin(YYINITIAL); return Ic10Types.OP_BGEZ;
            }
          // fall through
          case 235: break;
          case 80:
            { yybegin(YYINITIAL); return Ic10Types.OP_BGTZ;
            }
          // fall through
          case 236: break;
          case 81:
            { yybegin(YYINITIAL); return Ic10Types.OP_BLEZ;
            }
          // fall through
          case 237: break;
          case 82:
            { yybegin(YYINITIAL); return Ic10Types.OP_BLTZ;
            }
          // fall through
          case 238: break;
          case 83:
            { yybegin(YYINITIAL); return Ic10Types.OP_BNAN;
            }
          // fall through
          case 239: break;
          case 84:
            { yybegin(YYINITIAL); return Ic10Types.OP_BNAZ;
            }
          // fall through
          case 240: break;
          case 85:
            { yybegin(YYINITIAL); return Ic10Types.OP_BNEZ;
            }
          // fall through
          case 241: break;
          case 86:
            { yybegin(YYINITIAL); return Ic10Types.OP_BRAP;
            }
          // fall through
          case 242: break;
          case 87:
            { yybegin(YYINITIAL); return Ic10Types.OP_BREQ;
            }
          // fall through
          case 243: break;
          case 88:
            { yybegin(YYINITIAL); return Ic10Types.OP_BRGE;
            }
          // fall through
          case 244: break;
          case 89:
            { yybegin(YYINITIAL); return Ic10Types.OP_BRGT;
            }
          // fall through
          case 245: break;
          case 90:
            { yybegin(YYINITIAL); return Ic10Types.OP_BRLE;
            }
          // fall through
          case 246: break;
          case 91:
            { yybegin(YYINITIAL); return Ic10Types.OP_BRLT;
            }
          // fall through
          case 247: break;
          case 92:
            { yybegin(YYINITIAL); return Ic10Types.OP_BRNA;
            }
          // fall through
          case 248: break;
          case 93:
            { yybegin(YYINITIAL); return Ic10Types.OP_BRNE;
            }
          // fall through
          case 249: break;
          case 94:
            { yybegin(YYINITIAL); return Ic10Types.OP_CEIL;
            }
          // fall through
          case 250: break;
          case 95:
            { yybegin(YYINITIAL); return Ic10Types.OP_CLRD;
            }
          // fall through
          case 251: break;
          case 96:
            { yybegin(YYINITIAL); return Ic10Types.OP_GETD;
            }
          // fall through
          case 252: break;
          case 97:
            { yybegin(YYINITIAL); return Ic10Types.OP_LBNS;
            }
          // fall through
          case 253: break;
          case 98:
            { yybegin(YYINITIAL); return Ic10Types.OP_MOVE;
            }
          // fall through
          case 254: break;
          case 99:
            { yybegin(YYINITIAL); return Ic10Types.OP_PEEK;
            }
          // fall through
          case 255: break;
          case 100:
            { yybegin(YYINITIAL); return Ic10Types.OP_POKE;
            }
          // fall through
          case 256: break;
          case 101:
            { yybegin(YYINITIAL); return Ic10Types.OP_PUSH;
            }
          // fall through
          case 257: break;
          case 102:
            { yybegin(YYINITIAL); return Ic10Types.OP_PUTD;
            }
          // fall through
          case 258: break;
          case 103:
            { yybegin(YYINITIAL); return Ic10Types.OP_RAND;
            }
          // fall through
          case 259: break;
          case 104:
            { yybegin(YYINITIAL); return Ic10Types.OP_RMAP;
            }
          // fall through
          case 260: break;
          case 105:
            { yybegin(YYINITIAL); return Ic10Types.OP_SAPZ;
            }
          // fall through
          case 261: break;
          case 106:
            { yybegin(YYINITIAL); return Ic10Types.OP_SDNS;
            }
          // fall through
          case 262: break;
          case 107:
            { yybegin(YYINITIAL); return Ic10Types.OP_SDSE;
            }
          // fall through
          case 263: break;
          case 108:
            { yybegin(YYINITIAL); return Ic10Types.OP_SEQZ;
            }
          // fall through
          case 264: break;
          case 109:
            { yybegin(YYINITIAL); return Ic10Types.OP_SGEZ;
            }
          // fall through
          case 265: break;
          case 110:
            { yybegin(YYINITIAL); return Ic10Types.OP_SGTZ;
            }
          // fall through
          case 266: break;
          case 111:
            { yybegin(YYINITIAL); return Ic10Types.OP_SLEZ;
            }
          // fall through
          case 267: break;
          case 112:
            { yybegin(YYINITIAL); return Ic10Types.OP_SLTZ;
            }
          // fall through
          case 268: break;
          case 113:
            { yybegin(YYINITIAL); return Ic10Types.OP_SNAN;
            }
          // fall through
          case 269: break;
          case 114:
            { yybegin(YYINITIAL); return Ic10Types.OP_SNAZ;
            }
          // fall through
          case 270: break;
          case 115:
            { yybegin(YYINITIAL); return Ic10Types.OP_SNEZ;
            }
          // fall through
          case 271: break;
          case 116:
            { yybegin(YYINITIAL); return Ic10Types.OP_SQRT;
            }
          // fall through
          case 272: break;
          case 117:
            { yybegin(HASH_VALUE); return Ic10Types.OPENBRACKET;
            }
          // fall through
          case 273: break;
          case 118:
            { yybegin(YYINITIAL); return Ic10Types.OP_ALIAS;
            }
          // fall through
          case 274: break;
          case 119:
            { yybegin(YYINITIAL); return Ic10Types.OP_ATAN2;
            }
          // fall through
          case 275: break;
          case 120:
            { yybegin(YYINITIAL); return Ic10Types.OP_BAPAL;
            }
          // fall through
          case 276: break;
          case 121:
            { yybegin(YYINITIAL); return Ic10Types.OP_BEQAL;
            }
          // fall through
          case 277: break;
          case 122:
            { yybegin(YYINITIAL); return Ic10Types.OP_BGEAL;
            }
          // fall through
          case 278: break;
          case 123:
            { yybegin(YYINITIAL); return Ic10Types.OP_BGTAL;
            }
          // fall through
          case 279: break;
          case 124:
            { yybegin(YYINITIAL); return Ic10Types.OP_BLEAL;
            }
          // fall through
          case 280: break;
          case 125:
            { yybegin(YYINITIAL); return Ic10Types.OP_BLTAL;
            }
          // fall through
          case 281: break;
          case 126:
            { yybegin(YYINITIAL); return Ic10Types.OP_BNAAL;
            }
          // fall through
          case 282: break;
          case 127:
            { yybegin(YYINITIAL); return Ic10Types.OP_BNEAL;
            }
          // fall through
          case 283: break;
          case 128:
            { yybegin(YYINITIAL); return Ic10Types.OP_BRAPZ;
            }
          // fall through
          case 284: break;
          case 129:
            { yybegin(YYINITIAL); return Ic10Types.OP_BRDNS;
            }
          // fall through
          case 285: break;
          case 130:
            { yybegin(YYINITIAL); return Ic10Types.OP_BRDSE;
            }
          // fall through
          case 286: break;
          case 131:
            { yybegin(YYINITIAL); return Ic10Types.OP_BREQZ;
            }
          // fall through
          case 287: break;
          case 132:
            { yybegin(YYINITIAL); return Ic10Types.OP_BRGEZ;
            }
          // fall through
          case 288: break;
          case 133:
            { yybegin(YYINITIAL); return Ic10Types.OP_BRGTZ;
            }
          // fall through
          case 289: break;
          case 134:
            { yybegin(YYINITIAL); return Ic10Types.OP_BRLEZ;
            }
          // fall through
          case 290: break;
          case 135:
            { yybegin(YYINITIAL); return Ic10Types.OP_BRLTZ;
            }
          // fall through
          case 291: break;
          case 136:
            { yybegin(YYINITIAL); return Ic10Types.OP_BRNAN;
            }
          // fall through
          case 292: break;
          case 137:
            { yybegin(YYINITIAL); return Ic10Types.OP_BRNAZ;
            }
          // fall through
          case 293: break;
          case 138:
            { yybegin(YYINITIAL); return Ic10Types.OP_BRNEZ;
            }
          // fall through
          case 294: break;
          case 139:
            { yybegin(YYINITIAL); return Ic10Types.OP_FLOOR;
            }
          // fall through
          case 295: break;
          case 140:
            { yybegin(YYINITIAL); return Ic10Types.OP_ROUND;
            }
          // fall through
          case 296: break;
          case 141:
            { yybegin(YYINITIAL); return Ic10Types.OP_SLEEP;
            }
          // fall through
          case 297: break;
          case 142:
            { yybegin(YYINITIAL); return Ic10Types.OP_SNANZ;
            }
          // fall through
          case 298: break;
          case 143:
            { yybegin(YYINITIAL); return Ic10Types.OP_TRUNC;
            }
          // fall through
          case 299: break;
          case 144:
            { yybegin(YYINITIAL); return Ic10Types.OP_YIELD;
            }
          // fall through
          case 300: break;
          case 145:
            { yybegin(YYINITIAL); return Ic10Types.OP_BAPZAL;
            }
          // fall through
          case 301: break;
          case 146:
            { yybegin(YYINITIAL); return Ic10Types.OP_BDNSAL;
            }
          // fall through
          case 302: break;
          case 147:
            { yybegin(YYINITIAL); return Ic10Types.OP_BDSEAL;
            }
          // fall through
          case 303: break;
          case 148:
            { yybegin(YYINITIAL); return Ic10Types.OP_BEQZAL;
            }
          // fall through
          case 304: break;
          case 149:
            { yybegin(YYINITIAL); return Ic10Types.OP_BGEZAL;
            }
          // fall through
          case 305: break;
          case 150:
            { yybegin(YYINITIAL); return Ic10Types.OP_BGTZAL;
            }
          // fall through
          case 306: break;
          case 151:
            { yybegin(YYINITIAL); return Ic10Types.OP_BLEZAL;
            }
          // fall through
          case 307: break;
          case 152:
            { yybegin(YYINITIAL); return Ic10Types.OP_BLTZAL;
            }
          // fall through
          case 308: break;
          case 153:
            { yybegin(YYINITIAL); return Ic10Types.OP_BNAZAL;
            }
          // fall through
          case 309: break;
          case 154:
            { yybegin(YYINITIAL); return Ic10Types.OP_BNEZAL;
            }
          // fall through
          case 310: break;
          case 155:
            { yybegin(YYINITIAL); return Ic10Types.OP_DEFINE;
            }
          // fall through
          case 311: break;
          case 156:
            { yybegin(YYINITIAL); return Ic10Types.OP_SELECT;
            }
          // fall through
          case 312: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
